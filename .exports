# Make nano the default editor
export EDITOR="nano"
# Donâ€™t clear the screen after quitting a manual page
export MANPAGER="less -X"

# Prefer US English and use UTF-8
export LC_ALL="en_US.UTF-8"
export LANG="en_US"

export HOMEBREW_CASK_OPTS="--appdir=/Applications"

##
## PATH
##

# NPM (Use .npmrc instead)
export NPM_PACKAGES="${HOME}/.npm-packages"
export PATH="$NPM_PACKAGES/bin:$PATH"
# # Unset manpath so we can inherit from /etc/manpath via the `manpath` command
# unset MANPATH # delete if you already modified MANPATH elsewhere in your config
# export MANPATH="$NPM_PACKAGES/share/man:$(manpath)"

# Gnu-tar
export PATH="$HOME/.homebrew/opt/gnu-tar/libexec/gnubin:$PATH"

# Tizen
#export PATH="~/tizen-studio/tools/ide/bin:~/tizen-studio/tools:$PATH"

# Setting the LG_WEBOS_TV_SDK_HOME variable to the parent directory of CLI
export LG_WEBOS_TV_SDK_HOME="${HOME}/webos"
if [ -d "$LG_WEBOS_TV_SDK_HOME/CLI/bin" ]; then
  # Setting the WEBOS_CLI_TV variable to the bin directory of CLI
  export WEBOS_CLI_TV="$LG_WEBOS_TV_SDK_HOME/CLI/bin"
  # Adding the bin directory of CLI to the PATH variable
  export PATH="$PATH:$WEBOS_CLI_TV"
fi

# Dotfiles
export PATH="${HOME}/dotfiles/bin:$PATH"

# Android
export ANDROID_HOME="${HOME}/Library/Android/sdk"
export ANDROID_SDK="${HOME}/Library/Android/sdk"
export PATH="$ANDROID_SDK/platform-tools:$ANDROID_SDK/tools:$ANDROID_SDK/tools/bin:$PATH"

# Java
export JAVA_17_HOME="/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home" # $(/usr/libexec/java_home -v 17)
export JAVA_8_HOME="/Library/Java/JavaVirtualMachines/temurin-8.jdk/Contents/Home" # $(/usr/libexec/java_home -v 1.8.0)
alias java17="export JAVA_HOME=$JAVA_17_HOME"
alias java8="export JAVA_HOME=$JAVA_8_HOME"
#set default to Java 17
java17

# Kepler SDK
# source ~/kepler/kepler-sdk/0.2.6557.0/environment-setup-sdk.sh
# export PATH="$PATH:/usr/local/bin/keplersdktools"

# Homebrew
export PATH=$HOME/.homebrew/bin:$HOME/.homebrew/sbin:$PATH

# Golang
export GOPATH=$HOME/go # don't forget to change your path correctly!
export GOROOT="${HOME}/.homebrew/opt/go/libexec" # "$(brew --prefix go)/libexec"
export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"

# Rust
export PATH=$PATH:$HOME/.cargo/bin

# NVM
# export NVM_DIR="$HOME/.nvm"
# [ -s "$HOME/.homebrew/opt/nvm/nvm.sh" ] && \. "$HOME/.homebrew/opt/nvm/nvm.sh"  # This loads nvm. Commented out. Using nvm alias instead to reduce terminal stertup time.
# [ -s "$HOME/.homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$HOME/.homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# The above is very slow. Below uses lazy loading to speed up terminal startup time.
# https://gist.github.com/fl0w/07ce79bd44788f647deab307c94d6922
# Add every binary that requires nvm, npm or node to run to an array of node globals
NODE_GLOBALS=(`find ~/.nvm/versions/node -maxdepth 3 -type l -wholename '*/bin/*' | xargs -n1 basename | sort | uniq`)
NODE_GLOBALS+=("node")
NODE_GLOBALS+=("nvm")

# Lazy-loading nvm + npm on node globals call
load_nvm () {
  export NVM_DIR=~/.nvm
  [ -s "$(brew --prefix nvm)/nvm.sh" ] && . "$(brew --prefix nvm)/nvm.sh"
}

# Making node global trigger the lazy loading
for cmd in "${NODE_GLOBALS[@]}"; do
  eval "${cmd}(){ unset -f ${NODE_GLOBALS}; load_nvm; ${cmd} \$@ }"
done
